{"version":3,"file":"static/js/888.3a9aaac3.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","views/ContactsView.styled.jsx","views/ContactsView.jsx"],"sourcesContent":["export const getItems = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FormBoxStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  flex-flow: column wrap;\n  align-items: flex-start;\n  width: min-content;\n  border: 2px solid steelblue;\n`;\n\nexport const LabelStyled = styled.label`\n  display: flex;\n  flex-flow: column wrap;\n  text-align: left;\n  font-weight: 500;\n  font-size: 18px;\n  margin: 15px;\n  margin-bottom: 0;\n`;\n\nexport const ButtonStyled = styled.button`\n  margin-top: 15px;\n  margin-bottom: 15px;\n  margin-left: 15px;\n  border-radius: 4px;\n  border: none;\n  background-color: forestgreen;\n  font-weight: 600;\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.8;\n    &:hover, &:focus {\n    opacity: 1;\n  }\n`;\n\nexport const InputStyled = styled(Field)`\n  border: 2px solid lightblue;\n  margin-top: 10px;\n`;\n\nexport const ErrorText = styled.p`\n  font-size: 22px;\n  font-weight: 600;\n  color: red;\n  padding-left: 15px;\n`;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getItems } from 'redux/selectors';\nimport { addContact } from 'redux/PhonebookSlice';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { Toaster, toast } from 'react-hot-toast';\nimport {\n  FormBoxStyled,\n  LabelStyled,\n  ButtonStyled,\n  InputStyled,\n  ErrorText,\n} from './ContactForm.styled';\n\n\nfunction ContactForm() {\n  const contacts = useSelector(getItems);\n  const dispatch = useDispatch();\n \n\n\n  const handleSubmit = (values, { resetForm }) => {\n    const {name, number} = values\n    \n    contacts.find(contact => contact.name.toLowerCase() === values.name.toLowerCase())\n      ? toast.error(`${values.name} is already in contacts`)\n      : dispatch(addContact({ name, number }))\n    \n    resetForm();\n  };\n\n  const schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.string().required(),\n  });\n\n  return (\n    <>\n      <Toaster position=\"top-center\" />\n      <Formik\n        initialValues={{ name: '', number: '' }}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <FormBoxStyled autoComplete=\"off\">\n          <LabelStyled>\n            Name\n            <InputStyled\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </LabelStyled>\n          <ErrorMessage\n            name=\"name\"\n            render={message => <ErrorText>{message}</ErrorText>}\n          />\n\n          <LabelStyled>\n            Number\n            <InputStyled\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </LabelStyled>\n          <ErrorMessage\n            name=\"number\"\n            render={message => <ErrorText>{message}</ErrorText>}\n          />\n          <ButtonStyled type=\"submit\">Add contact</ButtonStyled>\n        </FormBoxStyled>\n      </Formik>\n    </>\n  );\n}\n\nexport default ContactForm;\n\n","import styled from 'styled-components';\n\nexport const LabelFil = styled.label`\n  display: flex;\n  flex-flow: column wrap;\n  font-weight: 500;\n  font-size: 18px;\n  margin: 15px;\n  margin-bottom: 15px;\n`;\n\nexport const InputFil = styled.input`\n  width: 15%;\n  border: 2px solid lightblue;\n  margin-top: 10px;\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/PhonebookSlice';\nimport { LabelFil, InputFil } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  return (  \n  <LabelFil>\n    Find contacts by name\n      <InputFil\n        type=\"text\"\n        onChange={e => dispatch(updateFilter(e.currentTarget.value))}\n      />\n  </LabelFil>\n)\n};\n\nexport default Filter;\n\n\n","import styled from 'styled-components';\n\nexport const LiContact = styled.li`\n  display: flex;\n  align-items: center;\n  font-size: 20px;\n`;\n\nexport const ButtonDelete = styled.button`\n  margin-top: 15px;\n  margin-bottom: 15px;\n  margin-left: 15px;\n  border-radius: 4px;\n  background-color: red;\n  border: none;\n  font-weight: 600;\n  cursor: pointer;\n  padding: 5px;\n  opacity: 0.8;\n    &:hover, &:focus {\n    opacity: 1;\n  }\n`;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { removeContact } from 'redux/PhonebookSlice';\nimport PropTypes from 'prop-types';\nimport { LiContact, ButtonDelete } from './ContactItem.styled';\n\nconst ContactItem = ({ name, id, number }) => {\n  const {error} = useSelector(state => state.contacts);\n  const dispatch = useDispatch();\n  \n\n  return (\n    <>\n      {error && <h2>Can\\'t delete task. Server error.</h2>}\n      <LiContact>\n      {name}: {number} \n      <ButtonDelete type=\"button\" onClick={() => dispatch(removeContact(id))}>\n        Delete\n      </ButtonDelete>\n      </LiContact>\n    </>    \n  )\n};\n\nexport default ContactItem;\n\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,  \n  id: PropTypes.string.isRequired,\n  number: PropTypes.string,\n  };\n","import styled from 'styled-components';\n\nexport const UlContacts = styled.ul`\n  margin-top: 0;\n`;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getItems, getFilter } from 'redux/selectors';\nimport ContactItem from '../ContactItem';\nimport { UlContacts } from './ContactList.styled';\n\nconst ContactList = () => {\n\n  const filter = useSelector(getFilter);\n  const normalizedFilter = filter.toLowerCase();\n   \n  const contacts = useSelector(getItems);\n  const visibleContacts = contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter))\n\n  \n  return (\n    <UlContacts>\n      {visibleContacts.map(({ id, name, number }) => (\n        <ContactItem\n          key={id}\n          name={name}\n          number={number}\n          id={id}\n        />\n      ))}\n    </UlContacts>\n  )\n};\n\nexport default ContactList;\n\n","import styled from 'styled-components';\n\nexport const ContactsBox = styled.div`\ntext-align: -webkit-center;\n`;\n\nexport const DivContacts = styled.div`\ntext-align: -webkit-auto;\n`","import { useEffect } from 'react';\nimport { fetchContacts } from 'redux/PhonebookSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getItems } from 'redux/selectors';\nimport ContactForm from '../components/ContactForm';\nimport Filter from '../components/Filter';\nimport ContactList from '../components/ContactList';\nimport { ContactsBox, DivContacts } from './ContactsView.styled';\n\n\nexport default function ContactsView() {\nconst contacts = useSelector(getItems);\nconst {isLoading, error} = useSelector(state => state.contacts);\nconst dispatch = useDispatch();\n  \n\n  useEffect(() => {\n    dispatch(fetchContacts())\n  }, [dispatch]);\n\n    return (\n   <ContactsBox>     \n      <h1>Phonebook</h1>\n     <ContactForm />\n     \n     {isLoading && <h2>Loading...</h2>}\n     {error && <h2>An error occurred: {error.message}</h2>}\n\n      {contacts.length > 0 && (\n       <DivContacts>\n         <h2>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </DivContacts>\n     )}     \n    </ContactsBox>   \n  )\n\n};\n\n\n\n\n\n\n\n////////////////////////////////////////////////////////////\n// import { useEffect } from 'react';\n// import { fetchContacts } from 'redux/PhonebookSlice';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { getItems } from 'redux/selectors';\n// import ContactForm from '../components/ContactForm';\n// import Filter from '../components/Filter';\n// import ContactList from '../components/ContactList';\n// import { ContactsBox, DivContacts } from './ContactsView.styled';\n\n\n// export default function ContactsView() {\n// const contacts = useSelector(getItems);\n// const {isLoading, error} = useSelector(state => state.contacts);\n// const dispatch = useDispatch();\n  \n\n//   useEffect(() => {\n//     dispatch(fetchContacts())\n//   }, [dispatch]);\n\n//     return (\n//    <ContactsBox>     \n//       <h1>Phonebook</h1>\n//      <ContactForm />\n     \n//      {isLoading && <h2>Loading...</h2>}\n//      {error && <h2>An error occurred: {error.message}</h2>}\n\n//       {contacts.length > 0 && (\n//        <DivContacts>\n//          <h2>Contacts</h2>\n//           <Filter />\n//           <ContactList />\n//         </DivContacts>\n//      )}     \n//     </ContactsBox>   \n//   )\n\n// };\n"],"names":["getItems","state","contacts","items","getFilter","filter","FormBoxStyled","styled","Form","LabelStyled","ButtonStyled","InputStyled","Field","ErrorText","useSelector","dispatch","useDispatch","schema","yup","shape","name","required","number","position","initialValues","validationSchema","onSubmit","values","resetForm","find","contact","toLowerCase","toast","addContact","autoComplete","type","pattern","title","render","message","LabelFil","InputFil","onChange","e","updateFilter","currentTarget","value","LiContact","ButtonDelete","id","error","onClick","removeContact","UlContacts","normalizedFilter","visibleContacts","includes","map","ContactsBox","DivContacts","ContactsView","isLoading","useEffect","fetchContacts","length"],"sourceRoot":""}